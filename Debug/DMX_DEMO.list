
DMX_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800371c  0800371c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003724  08003724  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800372c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  20000070  0800379c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  0800379c  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000976a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b08  00000000  00000000  0002980a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000788  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016689  00000000  00000000  0002c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f93  00000000  00000000  00042959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008684f  00000000  00000000  0004c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d313b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002678  00000000  00000000  000d318c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003670 	.word	0x08003670

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003670 	.word	0x08003670

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <clrDmxData>:
//static uint8_t fac_us = 0;					// DMX_Delay_us used
__root const char MenuStr[]={"Version :"__DATE__ __TIME__ __FILE__};

/* Clear DMX Buffer */
void clrDmxData()
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
	int i;
	for(i=1;i<513;i++)
 80004de:	2301      	movs	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	e007      	b.n	80004f4 <clrDmxData+0x1c>
	{
		dmxData[i] = 0;
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <clrDmxData+0x34>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
	for(i=1;i<513;i++)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	3301      	adds	r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004fa:	ddf3      	ble.n	80004e4 <clrDmxData+0xc>
	}
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000090 	.word	0x20000090

08000510 <GPIO_Tx_Config_OUT>:
/* Set Tx_GPIO_Mode */
//iomode 0:OUTPUT_PP
//iomode 1:AF_PP
void GPIO_Tx_Config_OUT(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
      /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8000516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800051a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2302      	movs	r3, #2
 8000522:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4619      	mov	r1, r3
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <GPIO_Tx_Config_OUT+0x28>)
 800052a:	f000 fe29 	bl	8001180 <HAL_GPIO_Init>
}
 800052e:	bf00      	nop
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020000 	.word	0x40020000

0800053c <GPIO_Tx_Config_AF>:
void GPIO_Tx_Config_AF(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

      /*Configure GPIO pin : PtPin */
    GPIO_InitStruct.Pin = DMX_TX_Pin;
 8000542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000546:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800054c:	2302      	movs	r3, #2
 800054e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DMX_TX_GPIO_Port, &GPIO_InitStruct);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4619      	mov	r1, r3
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <GPIO_Tx_Config_AF+0x28>)
 8000556:	f000 fe13 	bl	8001180 <HAL_GPIO_Init>
}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020000 	.word	0x40020000

08000568 <DMX_Delay_us>:

/* Delay nus for break */
void DMX_Delay_us(uint32_t nus)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
/*    Software Delay  */
    uint32_t i=8*nus;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	60fb      	str	r3, [r7, #12]
    while(i--);
 8000576:	bf00      	nop
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	60fa      	str	r2, [r7, #12]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1fa      	bne.n	8000578 <DMX_Delay_us+0x10>
//        temp = SysTick->CTRL;
//    }while((temp&0x01) && !(temp&(1<<16)));   
//    //SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
//    SysTick->LOAD = 0x01193F;
//    SysTick->VAL = 0X00;     
}
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DMX_Break>:
/* Send Break sign and 00 Code */
void DMX_Break()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    GPIO_Tx_Config_OUT();     //Set UART TX pin mode to OUTPUT
 8000594:	f7ff ffbc 	bl	8000510 <GPIO_Tx_Config_OUT>
    DMX_TX_High;			  //DMX512 Mark before break MBB >88us
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <DMX_Break+0x4c>)
 80005a0:	f000 ff72 	bl	8001488 <HAL_GPIO_WritePin>
    DMX_Delay_us(150);
 80005a4:	2096      	movs	r0, #150	; 0x96
 80005a6:	f7ff ffdf 	bl	8000568 <DMX_Delay_us>
    DMX_TX_Low;
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <DMX_Break+0x4c>)
 80005b2:	f000 ff69 	bl	8001488 <HAL_GPIO_WritePin>
    DMX_Delay_us(150);        //DMX512 BREAK >88us
 80005b6:	2096      	movs	r0, #150	; 0x96
 80005b8:	f7ff ffd6 	bl	8000568 <DMX_Delay_us>
    DMX_TX_High;
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <DMX_Break+0x4c>)
 80005c4:	f000 ff60 	bl	8001488 <HAL_GPIO_WritePin>
    DMX_Delay_us(15);         //DMX512 Mark after break MAB >8us
 80005c8:	200f      	movs	r0, #15
 80005ca:	f7ff ffcd 	bl	8000568 <DMX_Delay_us>
    GPIO_Tx_Config_AF();
 80005ce:	f7ff ffb5 	bl	800053c <GPIO_Tx_Config_AF>
    /* Send Start Code 00 */
    DMX_Send_9Data(0x00);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f804 	bl	80005e0 <DMX_Send_9Data>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40020000 	.word	0x40020000

080005e0 <DMX_Send_9Data>:
/* Send 9bit data and 9bit always set */
void DMX_Send_9Data(uint8_t tempdata)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    if(DMX_UART->SR & (1<<6))
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <DMX_Send_9Data+0x3c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d004      	beq.n	8000600 <DMX_Send_9Data+0x20>
    {
        DMX_UART->DR = 0x0100 | tempdata;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <DMX_Send_9Data+0x3c>)
 80005fe:	605a      	str	r2, [r3, #4]
    }
    while((DMX_UART->SR&0X40)==0);//waiting for Send data over
 8000600:	bf00      	nop
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <DMX_Send_9Data+0x3c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0f9      	beq.n	8000602 <DMX_Send_9Data+0x22>
}
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40011000 	.word	0x40011000

08000620 <DMX_Send_Packet>:
/* Send packet data,tempnum must <512 */
void DMX_Send_Packet(uint16_t tempnum, unsigned char* dmxData1 )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	80fb      	strh	r3, [r7, #6]
	DMX_UART_INIT_SEND_DATA;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <DMX_Send_Packet+0x50>)
 800062e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000632:	60da      	str	r2, [r3, #12]
    uint16_t i=0;
 8000634:	2300      	movs	r3, #0
 8000636:	81fb      	strh	r3, [r7, #14]
    DMX_Break();        //Break and Start Code
 8000638:	f7ff ffaa 	bl	8000590 <DMX_Break>
    if(tempnum==0)      //set to default
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10d      	bne.n	800065e <DMX_Send_Packet+0x3e>
        tempnum=512;
 8000642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000646:	80fb      	strh	r3, [r7, #6]
    while(i < tempnum)  //1-512
 8000648:	e009      	b.n	800065e <DMX_Send_Packet+0x3e>
    {
        DMX_Send_9Data(dmxData1[i]);
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	4413      	add	r3, r2
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffc4 	bl	80005e0 <DMX_Send_9Data>
        i++; 
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	3301      	adds	r3, #1
 800065c:	81fb      	strh	r3, [r7, #14]
    while(i < tempnum)  //1-512
 800065e:	89fa      	ldrh	r2, [r7, #14]
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	429a      	cmp	r2, r3
 8000664:	d3f1      	bcc.n	800064a <DMX_Send_Packet+0x2a>
    }
//    HAL_Delay(20);      //Mark time after Slot
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000049c 	.word	0x2000049c

08000674 <DMX_Init>:
/* Init DMX parameter */
void DMX_Init()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
/* Init HardWare Info */
    DMX_model=DMX_MODEL_NUM;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <DMX_Init+0x34>)
 800067a:	2203      	movs	r2, #3
 800067c:	801a      	strh	r2, [r3, #0]
    DMX_Chn=DMX_MODEL_CHN;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <DMX_Init+0x38>)
 8000680:	2228      	movs	r2, #40	; 0x28
 8000682:	701a      	strb	r2, [r3, #0]
    if((DMX_model*DMX_Chn)>512) //data must <512
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <DMX_Init+0x34>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <DMX_Init+0x38>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000696:	dd02      	ble.n	800069e <DMX_Init+0x2a>
       printf("ERROR Data too long !!\r\n");
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <DMX_Init+0x3c>)
 800069a:	f002 fb59 	bl	8002d50 <puts>
/* Init by HAL_Init() */
//    DMX_GPIO_Init();    //init RS485_DIR_Pin
//    DMX_UART_Init();    //init UART port and Pins
    clrDmxData();       //Clear Data
 800069e:	f7ff ff1b 	bl	80004d8 <clrDmxData>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000008c 	.word	0x2000008c
 80006ac:	2000008e 	.word	0x2000008e
 80006b0:	08003688 	.word	0x08003688

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fb28 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f824 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f882 	bl	80007c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006c4:	f000 f9fa 	bl	8000abc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006c8:	f000 fa20 	bl	8000b0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DMX_Init();
 80006cc:	f7ff ffd2 	bl	8000674 <DMX_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  DMX_Demo_Init();
  dmxDataDemo[0]= 255;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <main+0x4c>)
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	701a      	strb	r2, [r3, #0]
  dmxDataDemo[1]= 0;
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <main+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	705a      	strb	r2, [r3, #1]
  dmxDataDemo[2]= 255;
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <main+0x4c>)
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	709a      	strb	r2, [r3, #2]

//  DMX_Write_Add(1);
  while (1)
  {
    /* USER CODE END WHILE */
	  DMX_Send_Packet(512, dmxDataDemo);
 80006e2:	4907      	ldr	r1, [pc, #28]	; (8000700 <main+0x4c>)
 80006e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e8:	f7ff ff9a 	bl	8000620 <DMX_Send_Packet>
	  HAL_GPIO_TogglePin(LED1_Port, LED1_Pin);
 80006ec:	2120      	movs	r1, #32
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <main+0x50>)
 80006f0:	f000 fee3 	bl	80014ba <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f000 fb7a 	bl	8000df0 <HAL_Delay>
	  DMX_Send_Packet(512, dmxDataDemo);
 80006fc:	e7f1      	b.n	80006e2 <main+0x2e>
 80006fe:	bf00      	nop
 8000700:	20000294 	.word	0x20000294
 8000704:	40020000 	.word	0x40020000

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 faa4 	bl	8002c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <SystemClock_Config+0xb8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <SystemClock_Config+0xb8>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <SystemClock_Config+0xb8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <SystemClock_Config+0xbc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <SystemClock_Config+0xbc>)
 8000756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <SystemClock_Config+0xbc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fedb 	bl	8001538 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000788:	f000 f88c 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f93e 	bl	8001a28 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b2:	f000 f877 	bl	80008a4 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = LED1_Pin;
 8000816:	2320      	movs	r3, #32
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_GPIO_Init+0xd4>)
 800082e:	f000 fca7 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin;
 8000832:	f240 4307 	movw	r3, #1031	; 0x407
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000838:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4815      	ldr	r0, [pc, #84]	; (80008a0 <MX_GPIO_Init+0xd8>)
 800084a:	f000 fc99 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2006      	movs	r0, #6
 8000854:	f000 fbcb 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000858:	2006      	movs	r0, #6
 800085a:	f000 fbe4 	bl	8001026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2007      	movs	r0, #7
 8000864:	f000 fbc3 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000868:	2007      	movs	r0, #7
 800086a:	f000 fbdc 	bl	8001026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2008      	movs	r0, #8
 8000874:	f000 fbbb 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000878:	2008      	movs	r0, #8
 800087a:	f000 fbd4 	bl	8001026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2028      	movs	r0, #40	; 0x28
 8000884:	f000 fbb3 	bl	8000fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000888:	2028      	movs	r0, #40	; 0x28
 800088a:	f000 fbcc 	bl	8001026 <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>

080008ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <NMI_Handler+0x4>

080008b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <HardFault_Handler+0x4>

080008ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <BusFault_Handler+0x4>

080008c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <UsageFault_Handler+0x4>

080008cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 fa59 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 fdf2 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8000914:	2002      	movs	r0, #2
 8000916:	f000 fdeb 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}

0800091e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8000922:	2004      	movs	r0, #4
 8000924:	f000 fde4 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <USART2_IRQHandler+0x10>)
 8000932:	f001 faa7 	bl	8001e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200004e0 	.word	0x200004e0

08000940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW4_Pin);
 8000944:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000948:	f000 fdd2 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e00a      	b.n	8000978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000962:	f3af 8000 	nop.w
 8000966:	4601      	mov	r1, r0
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	b2ca      	uxtb	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf0      	blt.n	8000962 <_read+0x12>
	}

return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e009      	b.n	80009b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60ba      	str	r2, [r7, #8]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf1      	blt.n	800099c <_write+0x12>
	}
	return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_close>:

int _close(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ea:	605a      	str	r2, [r3, #4]
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_isatty>:

int _isatty(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	return 1;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <_sbrk+0x5c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <_sbrk+0x60>)
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <_sbrk+0x64>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <_sbrk+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d207      	bcs.n	8000a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a5c:	f002 f8d8 	bl	8002c10 <__errno>
 8000a60:	4603      	mov	r3, r0
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20018000 	.word	0x20018000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	20000498 	.word	0x20000498
 8000a94:	20000538 	.word	0x20000538

08000a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <MX_USART1_UART_Init+0x48>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <MX_USART1_UART_Init+0x4c>)
 8000aca:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART1_UART_Init+0x44>)
 8000aec:	f001 f97c 	bl	8001de8 <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART1_UART_Init+0x3e>
  {
    Error_Handler();
 8000af6:	f7ff fed5 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000049c 	.word	0x2000049c
 8000b04:	40011000 	.word	0x40011000
 8000b08:	0003d090 	.word	0x0003d090

08000b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART2_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b34:	220c      	movs	r2, #12
 8000b36:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_USART2_UART_Init+0x4c>)
 8000b46:	f001 f94f 	bl	8001de8 <HAL_UART_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000b50:	f7ff fea8 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200004e0 	.word	0x200004e0
 8000b5c:	40004400 	.word	0x40004400

08000b60 <HAL_MspInit>:
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <HAL_UART_MspInit+0xf8>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12d      	bne.n	8000c2e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
 8000bd6:	4b35      	ldr	r3, [pc, #212]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a34      	ldr	r2, [pc, #208]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	61bb      	str	r3, [r7, #24]
 8000bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 8000c0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1c:	2307      	movs	r3, #7
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4822      	ldr	r0, [pc, #136]	; (8000cb0 <HAL_UART_MspInit+0x100>)
 8000c28:	f000 faaa 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2c:	e038      	b.n	8000ca0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <HAL_UART_MspInit+0x104>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d133      	bne.n	8000ca0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0xfc>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c70:	230c      	movs	r3, #12
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c80:	2307      	movs	r3, #7
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <HAL_UART_MspInit+0x100>)
 8000c8c:	f000 fa78 	bl	8001180 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2026      	movs	r0, #38	; 0x26
 8000c96:	f000 f9aa 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c9a:	2026      	movs	r0, #38	; 0x26
 8000c9c:	f000 f9c3 	bl	8001026 <HAL_NVIC_EnableIRQ>
}
 8000ca0:	bf00      	nop
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce2:	f7ff fed9 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f001 ff99 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fce3 	bl	80006b4 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cfc:	0800372c 	.word	0x0800372c
  ldr r2, =_sbss
 8000d00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d04:	20000538 	.word	0x20000538

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f94f 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	200f      	movs	r0, #15
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff ff0e 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f967 	bl	8001042 <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f92f 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000524 	.word	0x20000524

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000524 	.word	0x20000524

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db0b      	blt.n	8000ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 021f 	and.w	r2, r3, #31
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <__NVIC_EnableIRQ+0x38>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	095b      	lsrs	r3, r3, #5
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff29 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff3e 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff31 	bl	8000e9c <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff feb6 	bl	8000dd8 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d008      	beq.n	800108c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e052      	b.n	8001132 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0216 	bic.w	r2, r2, #22
 800109a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d103      	bne.n	80010bc <HAL_DMA_Abort+0x62>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0208 	bic.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010dc:	e013      	b.n	8001106 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010de:	f7ff fe7b 	bl	8000dd8 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b05      	cmp	r3, #5
 80010ea:	d90c      	bls.n	8001106 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2220      	movs	r2, #32
 80010f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e015      	b.n	8001132 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e4      	bne.n	80010de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001118:	223f      	movs	r2, #63	; 0x3f
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d004      	beq.n	8001158 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e00c      	b.n	8001172 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2205      	movs	r2, #5
 800115c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e159      	b.n	8001450 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8148 	bne.w	800144a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a2 	beq.w	800144a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a56      	ldr	r2, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b54      	ldr	r3, [pc, #336]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x202>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x1fe>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x1fa>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <HAL_GPIO_Init+0x2fc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x1f6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_GPIO_Init+0x300>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x1f2>
 800136e:	2304      	movs	r3, #4
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001372:	2307      	movs	r3, #7
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f aea2 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014cc:	887a      	ldrh	r2, [r7, #2]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	041a      	lsls	r2, r3, #16
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	400b      	ands	r3, r1
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f806 	bl	8001520 <HAL_GPIO_EXTI_Callback>
  }
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e267      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d075      	beq.n	8001642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d00c      	beq.n	800157c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4b85      	ldr	r3, [pc, #532]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d112      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156e:	4b82      	ldr	r3, [pc, #520]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157a:	d10b      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	4b7e      	ldr	r3, [pc, #504]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d05b      	beq.n	8001640 <HAL_RCC_OscConfig+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d157      	bne.n	8001640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e242      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x74>
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6f      	ldr	r2, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6c      	ldr	r2, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015d0:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a68      	ldr	r2, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbf2 	bl	8000dd8 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbee 	bl	8000dd8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e207      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xc0>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fbde 	bl	8000dd8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fbda 	bl	8000dd8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1f3      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0xe8>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d063      	beq.n	8001716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	2b08      	cmp	r3, #8
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1c7      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4937      	ldr	r1, [pc, #220]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	e03a      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb93 	bl	8000dd8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fb8f 	bl	8000dd8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1a8      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4925      	ldr	r1, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb72 	bl	8000dd8 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fb6e 	bl	8000dd8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e187      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d036      	beq.n	8001790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d016      	beq.n	8001758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fb52 	bl	8000dd8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fb4e 	bl	8000dd8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e167      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x200>
 8001756:	e01b      	b.n	8001790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff fb3b 	bl	8000dd8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	e00e      	b.n	8001784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fb37 	bl	8000dd8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d907      	bls.n	8001784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e150      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 8001778:	40023800 	.word	0x40023800
 800177c:	42470000 	.word	0x42470000
 8001780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ea      	bne.n	8001766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8097 	beq.w	80018cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b7d      	ldr	r3, [pc, #500]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a7c      	ldr	r2, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b77      	ldr	r3, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d118      	bne.n	800180c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a73      	ldr	r2, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff faf7 	bl	8000dd8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff faf3 	bl	8000dd8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e10c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x2ea>
 8001814:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x30c>
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a5b      	ldr	r2, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d015      	beq.n	8001890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fab8 	bl	8000dd8 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fab4 	bl	8000dd8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0cb      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ee      	beq.n	800186c <HAL_RCC_OscConfig+0x334>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff faa2 	bl	8000dd8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fa9e 	bl	8000dd8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0b5      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ee      	bne.n	8001898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a1 	beq.w	8001a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d05c      	beq.n	800199c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d141      	bne.n	800196e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa72 	bl	8000dd8 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fa6e 	bl	8000dd8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e087      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	3b01      	subs	r3, #1
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fa47 	bl	8000dd8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff fa43 	bl	8000dd8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e05c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x416>
 800196c:	e054      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fa30 	bl	8000dd8 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fa2c 	bl	8000dd8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e045      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
 800199a:	e03d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e038      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000
 80019b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4ec>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d028      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d121      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d11a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d111      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cc      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d044      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e067      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff f95e 	bl	8000dd8 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff f95a 	bl	8000dd8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20c      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f821 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f8be 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	080036a0 	.word	0x080036a0
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf8:	b090      	sub	sp, #64	; 0x40
 8001bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001c00:	2300      	movs	r3, #0
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c04:	2300      	movs	r3, #0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d00d      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x40>
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	f200 80a1 	bhi.w	8001d60 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x34>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c26:	e09b      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c2c:	e09b      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2e:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c32:	e098      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c34:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3e:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d028      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	623b      	str	r3, [r7, #32]
 8001c54:	627a      	str	r2, [r7, #36]	; 0x24
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c60:	fb03 f201 	mul.w	r2, r3, r1
 8001c64:	2300      	movs	r3, #0
 8001c66:	fb00 f303 	mul.w	r3, r0, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a43      	ldr	r2, [pc, #268]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001c6e:	fba0 1202 	umull	r1, r2, r0, r2
 8001c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c74:	460a      	mov	r2, r1
 8001c76:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7a:	4413      	add	r3, r2
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	2200      	movs	r2, #0
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	61fa      	str	r2, [r7, #28]
 8001c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c8e:	f7fe faa1 	bl	80001d4 <__aeabi_uldivmod>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4613      	mov	r3, r2
 8001c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c9a:	e053      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	617a      	str	r2, [r7, #20]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cae:	f04f 0b00 	mov.w	fp, #0
 8001cb2:	4652      	mov	r2, sl
 8001cb4:	465b      	mov	r3, fp
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	0159      	lsls	r1, r3, #5
 8001cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc4:	0150      	lsls	r0, r2, #5
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	ebb2 080a 	subs.w	r8, r2, sl
 8001cce:	eb63 090b 	sbc.w	r9, r3, fp
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ce2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ce6:	ebb2 0408 	subs.w	r4, r2, r8
 8001cea:	eb63 0509 	sbc.w	r5, r3, r9
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	00eb      	lsls	r3, r5, #3
 8001cf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfc:	00e2      	lsls	r2, r4, #3
 8001cfe:	4614      	mov	r4, r2
 8001d00:	461d      	mov	r5, r3
 8001d02:	eb14 030a 	adds.w	r3, r4, sl
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	eb45 030b 	adc.w	r3, r5, fp
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	028b      	lsls	r3, r1, #10
 8001d1e:	4621      	mov	r1, r4
 8001d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d24:	4621      	mov	r1, r4
 8001d26:	028a      	lsls	r2, r1, #10
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	60fa      	str	r2, [r7, #12]
 8001d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d38:	f7fe fa4c 	bl	80001d4 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d5e:	e002      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3740      	adds	r7, #64	; 0x40
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	017d7840 	.word	0x017d7840

08001d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d9c:	f7ff fff0 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0a9b      	lsrs	r3, r3, #10
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4903      	ldr	r1, [pc, #12]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	080036b0 	.word	0x080036b0

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dc4:	f7ff ffdc 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0b5b      	lsrs	r3, r3, #13
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4903      	ldr	r1, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	080036b0 	.word	0x080036b0

08001de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e03f      	b.n	8001e7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fece 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2224      	movs	r2, #36	; 0x24
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 fc7b 	bl	8002728 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b0ba      	sub	sp, #232	; 0xe8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_UART_IRQHandler+0x66>
 8001ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fb65 	bl	80025b2 <UART_Receive_IT>
      return;
 8001ee8:	e256      	b.n	8002398 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80de 	beq.w	80020b0 <HAL_UART_IRQHandler+0x22c>
 8001ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80d1 	beq.w	80020b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_UART_IRQHandler+0xae>
 8001f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_UART_IRQHandler+0xd2>
 8001f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_UART_IRQHandler+0xf6>
 8001f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0204 	orr.w	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d011      	beq.n	8001faa <HAL_UART_IRQHandler+0x126>
 8001f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f8a:	f003 0320 	and.w	r3, r3, #32
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d105      	bne.n	8001f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f043 0208 	orr.w	r2, r3, #8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 81ed 	beq.w	800238e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x14e>
 8001fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 faf0 	bl	80025b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	bf0c      	ite	eq
 8001fe0:	2301      	moveq	r3, #1
 8001fe2:	2300      	movne	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d103      	bne.n	8001ffe <HAL_UART_IRQHandler+0x17a>
 8001ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d04f      	beq.n	800209e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f9f8 	bl	80023f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b40      	cmp	r3, #64	; 0x40
 8002010:	d141      	bne.n	8002096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3314      	adds	r3, #20
 8002018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002020:	e853 3f00 	ldrex	r3, [r3]
 8002024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800202c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3314      	adds	r3, #20
 800203a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800203e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800204a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800204e:	e841 2300 	strex	r3, r2, [r1]
 8002052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1d9      	bne.n	8002012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	2b00      	cmp	r3, #0
 8002064:	d013      	beq.n	800208e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	4a7d      	ldr	r2, [pc, #500]	; (8002260 <HAL_UART_IRQHandler+0x3dc>)
 800206c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f861 	bl	800113a <HAL_DMA_Abort_IT>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002088:	4610      	mov	r0, r2
 800208a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208c:	e00e      	b.n	80020ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f99a 	bl	80023c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002094:	e00a      	b.n	80020ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f996 	bl	80023c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800209c:	e006      	b.n	80020ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f992 	bl	80023c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80020aa:	e170      	b.n	800238e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ac:	bf00      	nop
    return;
 80020ae:	e16e      	b.n	800238e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 814a 	bne.w	800234e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8143 	beq.w	800234e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 813c 	beq.w	800234e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	f040 80b4 	bne.w	8002264 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8140 	beq.w	8002392 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800211a:	429a      	cmp	r2, r3
 800211c:	f080 8139 	bcs.w	8002392 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002126:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002132:	f000 8088 	beq.w	8002246 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002140:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002144:	e853 3f00 	ldrex	r3, [r3]
 8002148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800214c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	330c      	adds	r3, #12
 800215e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800216e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002172:	e841 2300 	strex	r3, r2, [r1]
 8002176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800217a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1d9      	bne.n	8002136 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3314      	adds	r3, #20
 8002188:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800218a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800218c:	e853 3f00 	ldrex	r3, [r3]
 8002190:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3314      	adds	r3, #20
 80021a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80021a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80021aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021b2:	e841 2300 	strex	r3, r2, [r1]
 80021b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80021b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1e1      	bne.n	8002182 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3314      	adds	r3, #20
 80021c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c8:	e853 3f00 	ldrex	r3, [r3]
 80021cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80021ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3314      	adds	r3, #20
 80021de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80021e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021ea:	e841 2300 	strex	r3, r2, [r1]
 80021ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80021f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e3      	bne.n	80021be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	330c      	adds	r3, #12
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220e:	e853 3f00 	ldrex	r3, [r3]
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002216:	f023 0310 	bic.w	r3, r3, #16
 800221a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002228:	65ba      	str	r2, [r7, #88]	; 0x58
 800222a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800222e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002230:	e841 2300 	strex	r3, r2, [r1]
 8002234:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e3      	bne.n	8002204 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe ff0a 	bl	800105a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800224e:	b29b      	uxth	r3, r3
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	b29b      	uxth	r3, r3
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f8c0 	bl	80023dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800225c:	e099      	b.n	8002392 <HAL_UART_IRQHandler+0x50e>
 800225e:	bf00      	nop
 8002260:	080024bb 	.word	0x080024bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800226c:	b29b      	uxth	r3, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 808b 	beq.w	8002396 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002280:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8086 	beq.w	8002396 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	330c      	adds	r3, #12
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002294:	e853 3f00 	ldrex	r3, [r3]
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80022ae:	647a      	str	r2, [r7, #68]	; 0x44
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022b6:	e841 2300 	strex	r3, r2, [r1]
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80022bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e3      	bne.n	800228a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3314      	adds	r3, #20
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	623b      	str	r3, [r7, #32]
   return(result);
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3314      	adds	r3, #20
 80022e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80022e6:	633a      	str	r2, [r7, #48]	; 0x30
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80022ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e3      	bne.n	80022c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	e853 3f00 	ldrex	r3, [r3]
 8002316:	60fb      	str	r3, [r7, #12]
   return(result);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0310 	bic.w	r3, r3, #16
 800231e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	330c      	adds	r3, #12
 8002328:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800232c:	61fa      	str	r2, [r7, #28]
 800232e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002330:	69b9      	ldr	r1, [r7, #24]
 8002332:	69fa      	ldr	r2, [r7, #28]
 8002334:	e841 2300 	strex	r3, r2, [r1]
 8002338:	617b      	str	r3, [r7, #20]
   return(result);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e3      	bne.n	8002308 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f848 	bl	80023dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800234c:	e023      	b.n	8002396 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800234e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_UART_IRQHandler+0x4ea>
 800235a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f8bb 	bl	80024e2 <UART_Transmit_IT>
    return;
 800236c:	e014      	b.n	8002398 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800236e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00e      	beq.n	8002398 <HAL_UART_IRQHandler+0x514>
 800237a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8fb 	bl	8002582 <UART_EndTransmit_IT>
    return;
 800238c:	e004      	b.n	8002398 <HAL_UART_IRQHandler+0x514>
    return;
 800238e:	bf00      	nop
 8002390:	e002      	b.n	8002398 <HAL_UART_IRQHandler+0x514>
      return;
 8002392:	bf00      	nop
 8002394:	e000      	b.n	8002398 <HAL_UART_IRQHandler+0x514>
      return;
 8002396:	bf00      	nop
  }
}
 8002398:	37e8      	adds	r7, #232	; 0xe8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop

080023a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b095      	sub	sp, #84	; 0x54
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	330c      	adds	r3, #12
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002406:	e853 3f00 	ldrex	r3, [r3]
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800241c:	643a      	str	r2, [r7, #64]	; 0x40
 800241e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002424:	e841 2300 	strex	r3, r2, [r1]
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e5      	bne.n	80023fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3314      	adds	r3, #20
 8002436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	e853 3f00 	ldrex	r3, [r3]
 800243e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f023 0301 	bic.w	r3, r3, #1
 8002446:	64bb      	str	r3, [r7, #72]	; 0x48
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3314      	adds	r3, #20
 800244e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002458:	e841 2300 	strex	r3, r2, [r1]
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e5      	bne.n	8002430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	2b01      	cmp	r3, #1
 800246a:	d119      	bne.n	80024a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	e853 3f00 	ldrex	r3, [r3]
 800247a:	60bb      	str	r3, [r7, #8]
   return(result);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f023 0310 	bic.w	r3, r3, #16
 8002482:	647b      	str	r3, [r7, #68]	; 0x44
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800248c:	61ba      	str	r2, [r7, #24]
 800248e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002490:	6979      	ldr	r1, [r7, #20]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	e841 2300 	strex	r3, r2, [r1]
 8002498:	613b      	str	r3, [r7, #16]
   return(result);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e5      	bne.n	800246c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024ae:	bf00      	nop
 80024b0:	3754      	adds	r7, #84	; 0x54
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff ff77 	bl	80023c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b21      	cmp	r3, #33	; 0x21
 80024f4:	d13e      	bne.n	8002574 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d114      	bne.n	800252a <UART_Transmit_IT+0x48>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d110      	bne.n	800252a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800251c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	1c9a      	adds	r2, r3, #2
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	621a      	str	r2, [r3, #32]
 8002528:	e008      	b.n	800253c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	1c59      	adds	r1, r3, #1
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6211      	str	r1, [r2, #32]
 8002534:	781a      	ldrb	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002540:	b29b      	uxth	r3, r3
 8002542:	3b01      	subs	r3, #1
 8002544:	b29b      	uxth	r3, r3
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4619      	mov	r1, r3
 800254a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800255e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002574:	2302      	movs	r3, #2
  }
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fefc 	bl	80023a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b08c      	sub	sp, #48	; 0x30
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b22      	cmp	r3, #34	; 0x22
 80025c4:	f040 80ab 	bne.w	800271e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d0:	d117      	bne.n	8002602 <UART_Receive_IT+0x50>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d113      	bne.n	8002602 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	1c9a      	adds	r2, r3, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002600:	e026      	b.n	8002650 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002614:	d007      	beq.n	8002626 <UART_Receive_IT+0x74>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <UART_Receive_IT+0x82>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e008      	b.n	8002646 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002640:	b2da      	uxtb	r2, r3
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29b      	uxth	r3, r3
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4619      	mov	r1, r3
 800265e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002660:	2b00      	cmp	r3, #0
 8002662:	d15a      	bne.n	800271a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0220 	bic.w	r2, r2, #32
 8002672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d135      	bne.n	8002710 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	330c      	adds	r3, #12
 80026b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	613b      	str	r3, [r7, #16]
   return(result);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f023 0310 	bic.w	r3, r3, #16
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ca:	623a      	str	r2, [r7, #32]
 80026cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ce:	69f9      	ldr	r1, [r7, #28]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	e841 2300 	strex	r3, r2, [r1]
 80026d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e5      	bne.n	80026aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d10a      	bne.n	8002702 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026ec:	2300      	movs	r3, #0
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fe67 	bl	80023dc <HAL_UARTEx_RxEventCallback>
 800270e:	e002      	b.n	8002716 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fe4f 	bl	80023b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e002      	b.n	8002720 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
  }
}
 8002720:	4618      	mov	r0, r3
 8002722:	3730      	adds	r7, #48	; 0x30
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b0c0      	sub	sp, #256	; 0x100
 800272e:	af00      	add	r7, sp, #0
 8002730:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	68d9      	ldr	r1, [r3, #12]
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	ea40 0301 	orr.w	r3, r0, r1
 8002750:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	431a      	orrs	r2, r3
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	431a      	orrs	r2, r3
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002780:	f021 010c 	bic.w	r1, r1, #12
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800278e:	430b      	orrs	r3, r1
 8002790:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800279e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a2:	6999      	ldr	r1, [r3, #24]
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	ea40 0301 	orr.w	r3, r0, r1
 80027ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4b8f      	ldr	r3, [pc, #572]	; (80029f4 <UART_SetConfig+0x2cc>)
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d005      	beq.n	80027c8 <UART_SetConfig+0xa0>
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b8d      	ldr	r3, [pc, #564]	; (80029f8 <UART_SetConfig+0x2d0>)
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d104      	bne.n	80027d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027c8:	f7ff fafa 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 80027cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027d0:	e003      	b.n	80027da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027d2:	f7ff fae1 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 80027d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e4:	f040 810c 	bne.w	8002a00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ec:	2200      	movs	r2, #0
 80027ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027fa:	4622      	mov	r2, r4
 80027fc:	462b      	mov	r3, r5
 80027fe:	1891      	adds	r1, r2, r2
 8002800:	65b9      	str	r1, [r7, #88]	; 0x58
 8002802:	415b      	adcs	r3, r3
 8002804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002806:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800280a:	4621      	mov	r1, r4
 800280c:	eb12 0801 	adds.w	r8, r2, r1
 8002810:	4629      	mov	r1, r5
 8002812:	eb43 0901 	adc.w	r9, r3, r1
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002822:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002826:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800282a:	4690      	mov	r8, r2
 800282c:	4699      	mov	r9, r3
 800282e:	4623      	mov	r3, r4
 8002830:	eb18 0303 	adds.w	r3, r8, r3
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002838:	462b      	mov	r3, r5
 800283a:	eb49 0303 	adc.w	r3, r9, r3
 800283e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800284e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002852:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002856:	460b      	mov	r3, r1
 8002858:	18db      	adds	r3, r3, r3
 800285a:	653b      	str	r3, [r7, #80]	; 0x50
 800285c:	4613      	mov	r3, r2
 800285e:	eb42 0303 	adc.w	r3, r2, r3
 8002862:	657b      	str	r3, [r7, #84]	; 0x54
 8002864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002868:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800286c:	f7fd fcb2 	bl	80001d4 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4b61      	ldr	r3, [pc, #388]	; (80029fc <UART_SetConfig+0x2d4>)
 8002876:	fba3 2302 	umull	r2, r3, r3, r2
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	011c      	lsls	r4, r3, #4
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002888:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800288c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	64b9      	str	r1, [r7, #72]	; 0x48
 8002898:	415b      	adcs	r3, r3
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800289c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028a0:	4641      	mov	r1, r8
 80028a2:	eb12 0a01 	adds.w	sl, r2, r1
 80028a6:	4649      	mov	r1, r9
 80028a8:	eb43 0b01 	adc.w	fp, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c0:	4692      	mov	sl, r2
 80028c2:	469b      	mov	fp, r3
 80028c4:	4643      	mov	r3, r8
 80028c6:	eb1a 0303 	adds.w	r3, sl, r3
 80028ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ce:	464b      	mov	r3, r9
 80028d0:	eb4b 0303 	adc.w	r3, fp, r3
 80028d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028ec:	460b      	mov	r3, r1
 80028ee:	18db      	adds	r3, r3, r3
 80028f0:	643b      	str	r3, [r7, #64]	; 0x40
 80028f2:	4613      	mov	r3, r2
 80028f4:	eb42 0303 	adc.w	r3, r2, r3
 80028f8:	647b      	str	r3, [r7, #68]	; 0x44
 80028fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002902:	f7fd fc67 	bl	80001d4 <__aeabi_uldivmod>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4611      	mov	r1, r2
 800290c:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <UART_SetConfig+0x2d4>)
 800290e:	fba3 2301 	umull	r2, r3, r3, r1
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2264      	movs	r2, #100	; 0x64
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	1acb      	subs	r3, r1, r3
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <UART_SetConfig+0x2d4>)
 8002924:	fba3 2302 	umull	r2, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002930:	441c      	add	r4, r3
 8002932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800293c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002940:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	1891      	adds	r1, r2, r2
 800294a:	63b9      	str	r1, [r7, #56]	; 0x38
 800294c:	415b      	adcs	r3, r3
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002950:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002954:	4641      	mov	r1, r8
 8002956:	1851      	adds	r1, r2, r1
 8002958:	6339      	str	r1, [r7, #48]	; 0x30
 800295a:	4649      	mov	r1, r9
 800295c:	414b      	adcs	r3, r1
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800296c:	4659      	mov	r1, fp
 800296e:	00cb      	lsls	r3, r1, #3
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002976:	4651      	mov	r1, sl
 8002978:	00ca      	lsls	r2, r1, #3
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	4603      	mov	r3, r0
 8002980:	4642      	mov	r2, r8
 8002982:	189b      	adds	r3, r3, r2
 8002984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002988:	464b      	mov	r3, r9
 800298a:	460a      	mov	r2, r1
 800298c:	eb42 0303 	adc.w	r3, r2, r3
 8002990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029a8:	460b      	mov	r3, r1
 80029aa:	18db      	adds	r3, r3, r3
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ae:	4613      	mov	r3, r2
 80029b0:	eb42 0303 	adc.w	r3, r2, r3
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029be:	f7fd fc09 	bl	80001d4 <__aeabi_uldivmod>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <UART_SetConfig+0x2d4>)
 80029c8:	fba3 1302 	umull	r1, r3, r3, r2
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	2164      	movs	r1, #100	; 0x64
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	3332      	adds	r3, #50	; 0x32
 80029da:	4a08      	ldr	r2, [pc, #32]	; (80029fc <UART_SetConfig+0x2d4>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	f003 0207 	and.w	r2, r3, #7
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4422      	add	r2, r4
 80029ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029f0:	e105      	b.n	8002bfe <UART_SetConfig+0x4d6>
 80029f2:	bf00      	nop
 80029f4:	40011000 	.word	0x40011000
 80029f8:	40011400 	.word	0x40011400
 80029fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a12:	4642      	mov	r2, r8
 8002a14:	464b      	mov	r3, r9
 8002a16:	1891      	adds	r1, r2, r2
 8002a18:	6239      	str	r1, [r7, #32]
 8002a1a:	415b      	adcs	r3, r3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a22:	4641      	mov	r1, r8
 8002a24:	1854      	adds	r4, r2, r1
 8002a26:	4649      	mov	r1, r9
 8002a28:	eb43 0501 	adc.w	r5, r3, r1
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	00eb      	lsls	r3, r5, #3
 8002a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a3a:	00e2      	lsls	r2, r4, #3
 8002a3c:	4614      	mov	r4, r2
 8002a3e:	461d      	mov	r5, r3
 8002a40:	4643      	mov	r3, r8
 8002a42:	18e3      	adds	r3, r4, r3
 8002a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a48:	464b      	mov	r3, r9
 8002a4a:	eb45 0303 	adc.w	r3, r5, r3
 8002a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a6e:	4629      	mov	r1, r5
 8002a70:	008b      	lsls	r3, r1, #2
 8002a72:	4621      	mov	r1, r4
 8002a74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a78:	4621      	mov	r1, r4
 8002a7a:	008a      	lsls	r2, r1, #2
 8002a7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a80:	f7fd fba8 	bl	80001d4 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4b60      	ldr	r3, [pc, #384]	; (8002c0c <UART_SetConfig+0x4e4>)
 8002a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	011c      	lsls	r4, r3, #4
 8002a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a96:	2200      	movs	r2, #0
 8002a98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002aa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	1891      	adds	r1, r2, r2
 8002aaa:	61b9      	str	r1, [r7, #24]
 8002aac:	415b      	adcs	r3, r3
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	1851      	adds	r1, r2, r1
 8002ab8:	6139      	str	r1, [r7, #16]
 8002aba:	4649      	mov	r1, r9
 8002abc:	414b      	adcs	r3, r1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002acc:	4659      	mov	r1, fp
 8002ace:	00cb      	lsls	r3, r1, #3
 8002ad0:	4651      	mov	r1, sl
 8002ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	00ca      	lsls	r2, r1, #3
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ae8:	464b      	mov	r3, r9
 8002aea:	460a      	mov	r2, r1
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002afe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	008b      	lsls	r3, r1, #2
 8002b10:	4641      	mov	r1, r8
 8002b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b16:	4641      	mov	r1, r8
 8002b18:	008a      	lsls	r2, r1, #2
 8002b1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b1e:	f7fd fb59 	bl	80001d4 <__aeabi_uldivmod>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <UART_SetConfig+0x4e4>)
 8002b28:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	2164      	movs	r1, #100	; 0x64
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	3332      	adds	r3, #50	; 0x32
 8002b3a:	4a34      	ldr	r2, [pc, #208]	; (8002c0c <UART_SetConfig+0x4e4>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b46:	441c      	add	r4, r3
 8002b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b50:	677a      	str	r2, [r7, #116]	; 0x74
 8002b52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b56:	4642      	mov	r2, r8
 8002b58:	464b      	mov	r3, r9
 8002b5a:	1891      	adds	r1, r2, r2
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	415b      	adcs	r3, r3
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b66:	4641      	mov	r1, r8
 8002b68:	1851      	adds	r1, r2, r1
 8002b6a:	6039      	str	r1, [r7, #0]
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	414b      	adcs	r3, r1
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b7e:	4659      	mov	r1, fp
 8002b80:	00cb      	lsls	r3, r1, #3
 8002b82:	4651      	mov	r1, sl
 8002b84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b88:	4651      	mov	r1, sl
 8002b8a:	00ca      	lsls	r2, r1, #3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4603      	mov	r3, r0
 8002b92:	4642      	mov	r2, r8
 8002b94:	189b      	adds	r3, r3, r2
 8002b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b98:	464b      	mov	r3, r9
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	663b      	str	r3, [r7, #96]	; 0x60
 8002bac:	667a      	str	r2, [r7, #100]	; 0x64
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bba:	4649      	mov	r1, r9
 8002bbc:	008b      	lsls	r3, r1, #2
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	008a      	lsls	r2, r1, #2
 8002bc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bcc:	f7fd fb02 	bl	80001d4 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <UART_SetConfig+0x4e4>)
 8002bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2164      	movs	r1, #100	; 0x64
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	3332      	adds	r3, #50	; 0x32
 8002be8:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <UART_SetConfig+0x4e4>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	f003 020f 	and.w	r2, r3, #15
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4422      	add	r2, r4
 8002bfc:	609a      	str	r2, [r3, #8]
}
 8002bfe:	bf00      	nop
 8002c00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c04:	46bd      	mov	sp, r7
 8002c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0a:	bf00      	nop
 8002c0c:	51eb851f 	.word	0x51eb851f

08002c10 <__errno>:
 8002c10:	4b01      	ldr	r3, [pc, #4]	; (8002c18 <__errno+0x8>)
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	2000000c 	.word	0x2000000c

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	4d0d      	ldr	r5, [pc, #52]	; (8002c54 <__libc_init_array+0x38>)
 8002c20:	4c0d      	ldr	r4, [pc, #52]	; (8002c58 <__libc_init_array+0x3c>)
 8002c22:	1b64      	subs	r4, r4, r5
 8002c24:	10a4      	asrs	r4, r4, #2
 8002c26:	2600      	movs	r6, #0
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	4d0b      	ldr	r5, [pc, #44]	; (8002c5c <__libc_init_array+0x40>)
 8002c2e:	4c0c      	ldr	r4, [pc, #48]	; (8002c60 <__libc_init_array+0x44>)
 8002c30:	f000 fd1e 	bl	8003670 <_init>
 8002c34:	1b64      	subs	r4, r4, r5
 8002c36:	10a4      	asrs	r4, r4, #2
 8002c38:	2600      	movs	r6, #0
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	08003724 	.word	0x08003724
 8002c58:	08003724 	.word	0x08003724
 8002c5c:	08003724 	.word	0x08003724
 8002c60:	08003728 	.word	0x08003728

08002c64 <memset>:
 8002c64:	4402      	add	r2, r0
 8002c66:	4603      	mov	r3, r0
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <memset+0xa>
 8002c6c:	4770      	bx	lr
 8002c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c72:	e7f9      	b.n	8002c68 <memset+0x4>

08002c74 <_puts_r>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	460e      	mov	r6, r1
 8002c78:	4605      	mov	r5, r0
 8002c7a:	b118      	cbz	r0, 8002c84 <_puts_r+0x10>
 8002c7c:	6983      	ldr	r3, [r0, #24]
 8002c7e:	b90b      	cbnz	r3, 8002c84 <_puts_r+0x10>
 8002c80:	f000 fa48 	bl	8003114 <__sinit>
 8002c84:	69ab      	ldr	r3, [r5, #24]
 8002c86:	68ac      	ldr	r4, [r5, #8]
 8002c88:	b913      	cbnz	r3, 8002c90 <_puts_r+0x1c>
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f000 fa42 	bl	8003114 <__sinit>
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <_puts_r+0xd0>)
 8002c92:	429c      	cmp	r4, r3
 8002c94:	d120      	bne.n	8002cd8 <_puts_r+0x64>
 8002c96:	686c      	ldr	r4, [r5, #4]
 8002c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c9a:	07db      	lsls	r3, r3, #31
 8002c9c:	d405      	bmi.n	8002caa <_puts_r+0x36>
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	0598      	lsls	r0, r3, #22
 8002ca2:	d402      	bmi.n	8002caa <_puts_r+0x36>
 8002ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ca6:	f000 fad3 	bl	8003250 <__retarget_lock_acquire_recursive>
 8002caa:	89a3      	ldrh	r3, [r4, #12]
 8002cac:	0719      	lsls	r1, r3, #28
 8002cae:	d51d      	bpl.n	8002cec <_puts_r+0x78>
 8002cb0:	6923      	ldr	r3, [r4, #16]
 8002cb2:	b1db      	cbz	r3, 8002cec <_puts_r+0x78>
 8002cb4:	3e01      	subs	r6, #1
 8002cb6:	68a3      	ldr	r3, [r4, #8]
 8002cb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	60a3      	str	r3, [r4, #8]
 8002cc0:	bb39      	cbnz	r1, 8002d12 <_puts_r+0x9e>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	da38      	bge.n	8002d38 <_puts_r+0xc4>
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	210a      	movs	r1, #10
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 f848 	bl	8002d60 <__swbuf_r>
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	d011      	beq.n	8002cf8 <_puts_r+0x84>
 8002cd4:	250a      	movs	r5, #10
 8002cd6:	e011      	b.n	8002cfc <_puts_r+0x88>
 8002cd8:	4b1b      	ldr	r3, [pc, #108]	; (8002d48 <_puts_r+0xd4>)
 8002cda:	429c      	cmp	r4, r3
 8002cdc:	d101      	bne.n	8002ce2 <_puts_r+0x6e>
 8002cde:	68ac      	ldr	r4, [r5, #8]
 8002ce0:	e7da      	b.n	8002c98 <_puts_r+0x24>
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <_puts_r+0xd8>)
 8002ce4:	429c      	cmp	r4, r3
 8002ce6:	bf08      	it	eq
 8002ce8:	68ec      	ldreq	r4, [r5, #12]
 8002cea:	e7d5      	b.n	8002c98 <_puts_r+0x24>
 8002cec:	4621      	mov	r1, r4
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f000 f888 	bl	8002e04 <__swsetup_r>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d0dd      	beq.n	8002cb4 <_puts_r+0x40>
 8002cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8002cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cfe:	07da      	lsls	r2, r3, #31
 8002d00:	d405      	bmi.n	8002d0e <_puts_r+0x9a>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	059b      	lsls	r3, r3, #22
 8002d06:	d402      	bmi.n	8002d0e <_puts_r+0x9a>
 8002d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d0a:	f000 faa2 	bl	8003252 <__retarget_lock_release_recursive>
 8002d0e:	4628      	mov	r0, r5
 8002d10:	bd70      	pop	{r4, r5, r6, pc}
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	da04      	bge.n	8002d20 <_puts_r+0xac>
 8002d16:	69a2      	ldr	r2, [r4, #24]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dc06      	bgt.n	8002d2a <_puts_r+0xb6>
 8002d1c:	290a      	cmp	r1, #10
 8002d1e:	d004      	beq.n	8002d2a <_puts_r+0xb6>
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	6022      	str	r2, [r4, #0]
 8002d26:	7019      	strb	r1, [r3, #0]
 8002d28:	e7c5      	b.n	8002cb6 <_puts_r+0x42>
 8002d2a:	4622      	mov	r2, r4
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f000 f817 	bl	8002d60 <__swbuf_r>
 8002d32:	3001      	adds	r0, #1
 8002d34:	d1bf      	bne.n	8002cb6 <_puts_r+0x42>
 8002d36:	e7df      	b.n	8002cf8 <_puts_r+0x84>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	250a      	movs	r5, #10
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	6022      	str	r2, [r4, #0]
 8002d40:	701d      	strb	r5, [r3, #0]
 8002d42:	e7db      	b.n	8002cfc <_puts_r+0x88>
 8002d44:	080036dc 	.word	0x080036dc
 8002d48:	080036fc 	.word	0x080036fc
 8002d4c:	080036bc 	.word	0x080036bc

08002d50 <puts>:
 8002d50:	4b02      	ldr	r3, [pc, #8]	; (8002d5c <puts+0xc>)
 8002d52:	4601      	mov	r1, r0
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	f7ff bf8d 	b.w	8002c74 <_puts_r>
 8002d5a:	bf00      	nop
 8002d5c:	2000000c 	.word	0x2000000c

08002d60 <__swbuf_r>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	460e      	mov	r6, r1
 8002d64:	4614      	mov	r4, r2
 8002d66:	4605      	mov	r5, r0
 8002d68:	b118      	cbz	r0, 8002d72 <__swbuf_r+0x12>
 8002d6a:	6983      	ldr	r3, [r0, #24]
 8002d6c:	b90b      	cbnz	r3, 8002d72 <__swbuf_r+0x12>
 8002d6e:	f000 f9d1 	bl	8003114 <__sinit>
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <__swbuf_r+0x98>)
 8002d74:	429c      	cmp	r4, r3
 8002d76:	d12b      	bne.n	8002dd0 <__swbuf_r+0x70>
 8002d78:	686c      	ldr	r4, [r5, #4]
 8002d7a:	69a3      	ldr	r3, [r4, #24]
 8002d7c:	60a3      	str	r3, [r4, #8]
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	071a      	lsls	r2, r3, #28
 8002d82:	d52f      	bpl.n	8002de4 <__swbuf_r+0x84>
 8002d84:	6923      	ldr	r3, [r4, #16]
 8002d86:	b36b      	cbz	r3, 8002de4 <__swbuf_r+0x84>
 8002d88:	6923      	ldr	r3, [r4, #16]
 8002d8a:	6820      	ldr	r0, [r4, #0]
 8002d8c:	1ac0      	subs	r0, r0, r3
 8002d8e:	6963      	ldr	r3, [r4, #20]
 8002d90:	b2f6      	uxtb	r6, r6
 8002d92:	4283      	cmp	r3, r0
 8002d94:	4637      	mov	r7, r6
 8002d96:	dc04      	bgt.n	8002da2 <__swbuf_r+0x42>
 8002d98:	4621      	mov	r1, r4
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f000 f926 	bl	8002fec <_fflush_r>
 8002da0:	bb30      	cbnz	r0, 8002df0 <__swbuf_r+0x90>
 8002da2:	68a3      	ldr	r3, [r4, #8]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	60a3      	str	r3, [r4, #8]
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	6022      	str	r2, [r4, #0]
 8002dae:	701e      	strb	r6, [r3, #0]
 8002db0:	6963      	ldr	r3, [r4, #20]
 8002db2:	3001      	adds	r0, #1
 8002db4:	4283      	cmp	r3, r0
 8002db6:	d004      	beq.n	8002dc2 <__swbuf_r+0x62>
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	07db      	lsls	r3, r3, #31
 8002dbc:	d506      	bpl.n	8002dcc <__swbuf_r+0x6c>
 8002dbe:	2e0a      	cmp	r6, #10
 8002dc0:	d104      	bne.n	8002dcc <__swbuf_r+0x6c>
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f000 f911 	bl	8002fec <_fflush_r>
 8002dca:	b988      	cbnz	r0, 8002df0 <__swbuf_r+0x90>
 8002dcc:	4638      	mov	r0, r7
 8002dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <__swbuf_r+0x9c>)
 8002dd2:	429c      	cmp	r4, r3
 8002dd4:	d101      	bne.n	8002dda <__swbuf_r+0x7a>
 8002dd6:	68ac      	ldr	r4, [r5, #8]
 8002dd8:	e7cf      	b.n	8002d7a <__swbuf_r+0x1a>
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <__swbuf_r+0xa0>)
 8002ddc:	429c      	cmp	r4, r3
 8002dde:	bf08      	it	eq
 8002de0:	68ec      	ldreq	r4, [r5, #12]
 8002de2:	e7ca      	b.n	8002d7a <__swbuf_r+0x1a>
 8002de4:	4621      	mov	r1, r4
 8002de6:	4628      	mov	r0, r5
 8002de8:	f000 f80c 	bl	8002e04 <__swsetup_r>
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d0cb      	beq.n	8002d88 <__swbuf_r+0x28>
 8002df0:	f04f 37ff 	mov.w	r7, #4294967295
 8002df4:	e7ea      	b.n	8002dcc <__swbuf_r+0x6c>
 8002df6:	bf00      	nop
 8002df8:	080036dc 	.word	0x080036dc
 8002dfc:	080036fc 	.word	0x080036fc
 8002e00:	080036bc 	.word	0x080036bc

08002e04 <__swsetup_r>:
 8002e04:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <__swsetup_r+0xcc>)
 8002e06:	b570      	push	{r4, r5, r6, lr}
 8002e08:	681d      	ldr	r5, [r3, #0]
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	b125      	cbz	r5, 8002e1a <__swsetup_r+0x16>
 8002e10:	69ab      	ldr	r3, [r5, #24]
 8002e12:	b913      	cbnz	r3, 8002e1a <__swsetup_r+0x16>
 8002e14:	4628      	mov	r0, r5
 8002e16:	f000 f97d 	bl	8003114 <__sinit>
 8002e1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <__swsetup_r+0xd0>)
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d10f      	bne.n	8002e40 <__swsetup_r+0x3c>
 8002e20:	686c      	ldr	r4, [r5, #4]
 8002e22:	89a3      	ldrh	r3, [r4, #12]
 8002e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e28:	0719      	lsls	r1, r3, #28
 8002e2a:	d42c      	bmi.n	8002e86 <__swsetup_r+0x82>
 8002e2c:	06dd      	lsls	r5, r3, #27
 8002e2e:	d411      	bmi.n	8002e54 <__swsetup_r+0x50>
 8002e30:	2309      	movs	r3, #9
 8002e32:	6033      	str	r3, [r6, #0]
 8002e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e38:	81a3      	strh	r3, [r4, #12]
 8002e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3e:	e03e      	b.n	8002ebe <__swsetup_r+0xba>
 8002e40:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <__swsetup_r+0xd4>)
 8002e42:	429c      	cmp	r4, r3
 8002e44:	d101      	bne.n	8002e4a <__swsetup_r+0x46>
 8002e46:	68ac      	ldr	r4, [r5, #8]
 8002e48:	e7eb      	b.n	8002e22 <__swsetup_r+0x1e>
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <__swsetup_r+0xd8>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	bf08      	it	eq
 8002e50:	68ec      	ldreq	r4, [r5, #12]
 8002e52:	e7e6      	b.n	8002e22 <__swsetup_r+0x1e>
 8002e54:	0758      	lsls	r0, r3, #29
 8002e56:	d512      	bpl.n	8002e7e <__swsetup_r+0x7a>
 8002e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e5a:	b141      	cbz	r1, 8002e6e <__swsetup_r+0x6a>
 8002e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e60:	4299      	cmp	r1, r3
 8002e62:	d002      	beq.n	8002e6a <__swsetup_r+0x66>
 8002e64:	4630      	mov	r0, r6
 8002e66:	f000 fa5b 	bl	8003320 <_free_r>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e6e:	89a3      	ldrh	r3, [r4, #12]
 8002e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e74:	81a3      	strh	r3, [r4, #12]
 8002e76:	2300      	movs	r3, #0
 8002e78:	6063      	str	r3, [r4, #4]
 8002e7a:	6923      	ldr	r3, [r4, #16]
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	89a3      	ldrh	r3, [r4, #12]
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	81a3      	strh	r3, [r4, #12]
 8002e86:	6923      	ldr	r3, [r4, #16]
 8002e88:	b94b      	cbnz	r3, 8002e9e <__swsetup_r+0x9a>
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e94:	d003      	beq.n	8002e9e <__swsetup_r+0x9a>
 8002e96:	4621      	mov	r1, r4
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f000 fa01 	bl	80032a0 <__smakebuf_r>
 8002e9e:	89a0      	ldrh	r0, [r4, #12]
 8002ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ea4:	f010 0301 	ands.w	r3, r0, #1
 8002ea8:	d00a      	beq.n	8002ec0 <__swsetup_r+0xbc>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60a3      	str	r3, [r4, #8]
 8002eae:	6963      	ldr	r3, [r4, #20]
 8002eb0:	425b      	negs	r3, r3
 8002eb2:	61a3      	str	r3, [r4, #24]
 8002eb4:	6923      	ldr	r3, [r4, #16]
 8002eb6:	b943      	cbnz	r3, 8002eca <__swsetup_r+0xc6>
 8002eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ebc:	d1ba      	bne.n	8002e34 <__swsetup_r+0x30>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	0781      	lsls	r1, r0, #30
 8002ec2:	bf58      	it	pl
 8002ec4:	6963      	ldrpl	r3, [r4, #20]
 8002ec6:	60a3      	str	r3, [r4, #8]
 8002ec8:	e7f4      	b.n	8002eb4 <__swsetup_r+0xb0>
 8002eca:	2000      	movs	r0, #0
 8002ecc:	e7f7      	b.n	8002ebe <__swsetup_r+0xba>
 8002ece:	bf00      	nop
 8002ed0:	2000000c 	.word	0x2000000c
 8002ed4:	080036dc 	.word	0x080036dc
 8002ed8:	080036fc 	.word	0x080036fc
 8002edc:	080036bc 	.word	0x080036bc

08002ee0 <__sflush_r>:
 8002ee0:	898a      	ldrh	r2, [r1, #12]
 8002ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	0710      	lsls	r0, r2, #28
 8002eea:	460c      	mov	r4, r1
 8002eec:	d458      	bmi.n	8002fa0 <__sflush_r+0xc0>
 8002eee:	684b      	ldr	r3, [r1, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	dc05      	bgt.n	8002f00 <__sflush_r+0x20>
 8002ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	dc02      	bgt.n	8002f00 <__sflush_r+0x20>
 8002efa:	2000      	movs	r0, #0
 8002efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f02:	2e00      	cmp	r6, #0
 8002f04:	d0f9      	beq.n	8002efa <__sflush_r+0x1a>
 8002f06:	2300      	movs	r3, #0
 8002f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f0c:	682f      	ldr	r7, [r5, #0]
 8002f0e:	602b      	str	r3, [r5, #0]
 8002f10:	d032      	beq.n	8002f78 <__sflush_r+0x98>
 8002f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	075a      	lsls	r2, r3, #29
 8002f18:	d505      	bpl.n	8002f26 <__sflush_r+0x46>
 8002f1a:	6863      	ldr	r3, [r4, #4]
 8002f1c:	1ac0      	subs	r0, r0, r3
 8002f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f20:	b10b      	cbz	r3, 8002f26 <__sflush_r+0x46>
 8002f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f24:	1ac0      	subs	r0, r0, r3
 8002f26:	2300      	movs	r3, #0
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f2c:	6a21      	ldr	r1, [r4, #32]
 8002f2e:	4628      	mov	r0, r5
 8002f30:	47b0      	blx	r6
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	d106      	bne.n	8002f46 <__sflush_r+0x66>
 8002f38:	6829      	ldr	r1, [r5, #0]
 8002f3a:	291d      	cmp	r1, #29
 8002f3c:	d82c      	bhi.n	8002f98 <__sflush_r+0xb8>
 8002f3e:	4a2a      	ldr	r2, [pc, #168]	; (8002fe8 <__sflush_r+0x108>)
 8002f40:	40ca      	lsrs	r2, r1
 8002f42:	07d6      	lsls	r6, r2, #31
 8002f44:	d528      	bpl.n	8002f98 <__sflush_r+0xb8>
 8002f46:	2200      	movs	r2, #0
 8002f48:	6062      	str	r2, [r4, #4]
 8002f4a:	04d9      	lsls	r1, r3, #19
 8002f4c:	6922      	ldr	r2, [r4, #16]
 8002f4e:	6022      	str	r2, [r4, #0]
 8002f50:	d504      	bpl.n	8002f5c <__sflush_r+0x7c>
 8002f52:	1c42      	adds	r2, r0, #1
 8002f54:	d101      	bne.n	8002f5a <__sflush_r+0x7a>
 8002f56:	682b      	ldr	r3, [r5, #0]
 8002f58:	b903      	cbnz	r3, 8002f5c <__sflush_r+0x7c>
 8002f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8002f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f5e:	602f      	str	r7, [r5, #0]
 8002f60:	2900      	cmp	r1, #0
 8002f62:	d0ca      	beq.n	8002efa <__sflush_r+0x1a>
 8002f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f68:	4299      	cmp	r1, r3
 8002f6a:	d002      	beq.n	8002f72 <__sflush_r+0x92>
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 f9d7 	bl	8003320 <_free_r>
 8002f72:	2000      	movs	r0, #0
 8002f74:	6360      	str	r0, [r4, #52]	; 0x34
 8002f76:	e7c1      	b.n	8002efc <__sflush_r+0x1c>
 8002f78:	6a21      	ldr	r1, [r4, #32]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	47b0      	blx	r6
 8002f80:	1c41      	adds	r1, r0, #1
 8002f82:	d1c7      	bne.n	8002f14 <__sflush_r+0x34>
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0c4      	beq.n	8002f14 <__sflush_r+0x34>
 8002f8a:	2b1d      	cmp	r3, #29
 8002f8c:	d001      	beq.n	8002f92 <__sflush_r+0xb2>
 8002f8e:	2b16      	cmp	r3, #22
 8002f90:	d101      	bne.n	8002f96 <__sflush_r+0xb6>
 8002f92:	602f      	str	r7, [r5, #0]
 8002f94:	e7b1      	b.n	8002efa <__sflush_r+0x1a>
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	e7ad      	b.n	8002efc <__sflush_r+0x1c>
 8002fa0:	690f      	ldr	r7, [r1, #16]
 8002fa2:	2f00      	cmp	r7, #0
 8002fa4:	d0a9      	beq.n	8002efa <__sflush_r+0x1a>
 8002fa6:	0793      	lsls	r3, r2, #30
 8002fa8:	680e      	ldr	r6, [r1, #0]
 8002faa:	bf08      	it	eq
 8002fac:	694b      	ldreq	r3, [r1, #20]
 8002fae:	600f      	str	r7, [r1, #0]
 8002fb0:	bf18      	it	ne
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	eba6 0807 	sub.w	r8, r6, r7
 8002fb8:	608b      	str	r3, [r1, #8]
 8002fba:	f1b8 0f00 	cmp.w	r8, #0
 8002fbe:	dd9c      	ble.n	8002efa <__sflush_r+0x1a>
 8002fc0:	6a21      	ldr	r1, [r4, #32]
 8002fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	463a      	mov	r2, r7
 8002fc8:	4628      	mov	r0, r5
 8002fca:	47b0      	blx	r6
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	dc06      	bgt.n	8002fde <__sflush_r+0xfe>
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd6:	81a3      	strh	r3, [r4, #12]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	e78e      	b.n	8002efc <__sflush_r+0x1c>
 8002fde:	4407      	add	r7, r0
 8002fe0:	eba8 0800 	sub.w	r8, r8, r0
 8002fe4:	e7e9      	b.n	8002fba <__sflush_r+0xda>
 8002fe6:	bf00      	nop
 8002fe8:	20400001 	.word	0x20400001

08002fec <_fflush_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	690b      	ldr	r3, [r1, #16]
 8002ff0:	4605      	mov	r5, r0
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	b913      	cbnz	r3, 8002ffc <_fflush_r+0x10>
 8002ff6:	2500      	movs	r5, #0
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}
 8002ffc:	b118      	cbz	r0, 8003006 <_fflush_r+0x1a>
 8002ffe:	6983      	ldr	r3, [r0, #24]
 8003000:	b90b      	cbnz	r3, 8003006 <_fflush_r+0x1a>
 8003002:	f000 f887 	bl	8003114 <__sinit>
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <_fflush_r+0x6c>)
 8003008:	429c      	cmp	r4, r3
 800300a:	d11b      	bne.n	8003044 <_fflush_r+0x58>
 800300c:	686c      	ldr	r4, [r5, #4]
 800300e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ef      	beq.n	8002ff6 <_fflush_r+0xa>
 8003016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003018:	07d0      	lsls	r0, r2, #31
 800301a:	d404      	bmi.n	8003026 <_fflush_r+0x3a>
 800301c:	0599      	lsls	r1, r3, #22
 800301e:	d402      	bmi.n	8003026 <_fflush_r+0x3a>
 8003020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003022:	f000 f915 	bl	8003250 <__retarget_lock_acquire_recursive>
 8003026:	4628      	mov	r0, r5
 8003028:	4621      	mov	r1, r4
 800302a:	f7ff ff59 	bl	8002ee0 <__sflush_r>
 800302e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003030:	07da      	lsls	r2, r3, #31
 8003032:	4605      	mov	r5, r0
 8003034:	d4e0      	bmi.n	8002ff8 <_fflush_r+0xc>
 8003036:	89a3      	ldrh	r3, [r4, #12]
 8003038:	059b      	lsls	r3, r3, #22
 800303a:	d4dd      	bmi.n	8002ff8 <_fflush_r+0xc>
 800303c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800303e:	f000 f908 	bl	8003252 <__retarget_lock_release_recursive>
 8003042:	e7d9      	b.n	8002ff8 <_fflush_r+0xc>
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <_fflush_r+0x70>)
 8003046:	429c      	cmp	r4, r3
 8003048:	d101      	bne.n	800304e <_fflush_r+0x62>
 800304a:	68ac      	ldr	r4, [r5, #8]
 800304c:	e7df      	b.n	800300e <_fflush_r+0x22>
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <_fflush_r+0x74>)
 8003050:	429c      	cmp	r4, r3
 8003052:	bf08      	it	eq
 8003054:	68ec      	ldreq	r4, [r5, #12]
 8003056:	e7da      	b.n	800300e <_fflush_r+0x22>
 8003058:	080036dc 	.word	0x080036dc
 800305c:	080036fc 	.word	0x080036fc
 8003060:	080036bc 	.word	0x080036bc

08003064 <std>:
 8003064:	2300      	movs	r3, #0
 8003066:	b510      	push	{r4, lr}
 8003068:	4604      	mov	r4, r0
 800306a:	e9c0 3300 	strd	r3, r3, [r0]
 800306e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003072:	6083      	str	r3, [r0, #8]
 8003074:	8181      	strh	r1, [r0, #12]
 8003076:	6643      	str	r3, [r0, #100]	; 0x64
 8003078:	81c2      	strh	r2, [r0, #14]
 800307a:	6183      	str	r3, [r0, #24]
 800307c:	4619      	mov	r1, r3
 800307e:	2208      	movs	r2, #8
 8003080:	305c      	adds	r0, #92	; 0x5c
 8003082:	f7ff fdef 	bl	8002c64 <memset>
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <std+0x38>)
 8003088:	6263      	str	r3, [r4, #36]	; 0x24
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <std+0x3c>)
 800308c:	62a3      	str	r3, [r4, #40]	; 0x28
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <std+0x40>)
 8003090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <std+0x44>)
 8003094:	6224      	str	r4, [r4, #32]
 8003096:	6323      	str	r3, [r4, #48]	; 0x30
 8003098:	bd10      	pop	{r4, pc}
 800309a:	bf00      	nop
 800309c:	08003501 	.word	0x08003501
 80030a0:	08003523 	.word	0x08003523
 80030a4:	0800355b 	.word	0x0800355b
 80030a8:	0800357f 	.word	0x0800357f

080030ac <_cleanup_r>:
 80030ac:	4901      	ldr	r1, [pc, #4]	; (80030b4 <_cleanup_r+0x8>)
 80030ae:	f000 b8af 	b.w	8003210 <_fwalk_reent>
 80030b2:	bf00      	nop
 80030b4:	08002fed 	.word	0x08002fed

080030b8 <__sfmoreglue>:
 80030b8:	b570      	push	{r4, r5, r6, lr}
 80030ba:	2268      	movs	r2, #104	; 0x68
 80030bc:	1e4d      	subs	r5, r1, #1
 80030be:	4355      	muls	r5, r2
 80030c0:	460e      	mov	r6, r1
 80030c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030c6:	f000 f997 	bl	80033f8 <_malloc_r>
 80030ca:	4604      	mov	r4, r0
 80030cc:	b140      	cbz	r0, 80030e0 <__sfmoreglue+0x28>
 80030ce:	2100      	movs	r1, #0
 80030d0:	e9c0 1600 	strd	r1, r6, [r0]
 80030d4:	300c      	adds	r0, #12
 80030d6:	60a0      	str	r0, [r4, #8]
 80030d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030dc:	f7ff fdc2 	bl	8002c64 <memset>
 80030e0:	4620      	mov	r0, r4
 80030e2:	bd70      	pop	{r4, r5, r6, pc}

080030e4 <__sfp_lock_acquire>:
 80030e4:	4801      	ldr	r0, [pc, #4]	; (80030ec <__sfp_lock_acquire+0x8>)
 80030e6:	f000 b8b3 	b.w	8003250 <__retarget_lock_acquire_recursive>
 80030ea:	bf00      	nop
 80030ec:	20000529 	.word	0x20000529

080030f0 <__sfp_lock_release>:
 80030f0:	4801      	ldr	r0, [pc, #4]	; (80030f8 <__sfp_lock_release+0x8>)
 80030f2:	f000 b8ae 	b.w	8003252 <__retarget_lock_release_recursive>
 80030f6:	bf00      	nop
 80030f8:	20000529 	.word	0x20000529

080030fc <__sinit_lock_acquire>:
 80030fc:	4801      	ldr	r0, [pc, #4]	; (8003104 <__sinit_lock_acquire+0x8>)
 80030fe:	f000 b8a7 	b.w	8003250 <__retarget_lock_acquire_recursive>
 8003102:	bf00      	nop
 8003104:	2000052a 	.word	0x2000052a

08003108 <__sinit_lock_release>:
 8003108:	4801      	ldr	r0, [pc, #4]	; (8003110 <__sinit_lock_release+0x8>)
 800310a:	f000 b8a2 	b.w	8003252 <__retarget_lock_release_recursive>
 800310e:	bf00      	nop
 8003110:	2000052a 	.word	0x2000052a

08003114 <__sinit>:
 8003114:	b510      	push	{r4, lr}
 8003116:	4604      	mov	r4, r0
 8003118:	f7ff fff0 	bl	80030fc <__sinit_lock_acquire>
 800311c:	69a3      	ldr	r3, [r4, #24]
 800311e:	b11b      	cbz	r3, 8003128 <__sinit+0x14>
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	f7ff bff0 	b.w	8003108 <__sinit_lock_release>
 8003128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800312c:	6523      	str	r3, [r4, #80]	; 0x50
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <__sinit+0x68>)
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <__sinit+0x6c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	62a2      	str	r2, [r4, #40]	; 0x28
 8003136:	42a3      	cmp	r3, r4
 8003138:	bf04      	itt	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	61a3      	streq	r3, [r4, #24]
 800313e:	4620      	mov	r0, r4
 8003140:	f000 f820 	bl	8003184 <__sfp>
 8003144:	6060      	str	r0, [r4, #4]
 8003146:	4620      	mov	r0, r4
 8003148:	f000 f81c 	bl	8003184 <__sfp>
 800314c:	60a0      	str	r0, [r4, #8]
 800314e:	4620      	mov	r0, r4
 8003150:	f000 f818 	bl	8003184 <__sfp>
 8003154:	2200      	movs	r2, #0
 8003156:	60e0      	str	r0, [r4, #12]
 8003158:	2104      	movs	r1, #4
 800315a:	6860      	ldr	r0, [r4, #4]
 800315c:	f7ff ff82 	bl	8003064 <std>
 8003160:	68a0      	ldr	r0, [r4, #8]
 8003162:	2201      	movs	r2, #1
 8003164:	2109      	movs	r1, #9
 8003166:	f7ff ff7d 	bl	8003064 <std>
 800316a:	68e0      	ldr	r0, [r4, #12]
 800316c:	2202      	movs	r2, #2
 800316e:	2112      	movs	r1, #18
 8003170:	f7ff ff78 	bl	8003064 <std>
 8003174:	2301      	movs	r3, #1
 8003176:	61a3      	str	r3, [r4, #24]
 8003178:	e7d2      	b.n	8003120 <__sinit+0xc>
 800317a:	bf00      	nop
 800317c:	080036b8 	.word	0x080036b8
 8003180:	080030ad 	.word	0x080030ad

08003184 <__sfp>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	4607      	mov	r7, r0
 8003188:	f7ff ffac 	bl	80030e4 <__sfp_lock_acquire>
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <__sfp+0x84>)
 800318e:	681e      	ldr	r6, [r3, #0]
 8003190:	69b3      	ldr	r3, [r6, #24]
 8003192:	b913      	cbnz	r3, 800319a <__sfp+0x16>
 8003194:	4630      	mov	r0, r6
 8003196:	f7ff ffbd 	bl	8003114 <__sinit>
 800319a:	3648      	adds	r6, #72	; 0x48
 800319c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	d503      	bpl.n	80031ac <__sfp+0x28>
 80031a4:	6833      	ldr	r3, [r6, #0]
 80031a6:	b30b      	cbz	r3, 80031ec <__sfp+0x68>
 80031a8:	6836      	ldr	r6, [r6, #0]
 80031aa:	e7f7      	b.n	800319c <__sfp+0x18>
 80031ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031b0:	b9d5      	cbnz	r5, 80031e8 <__sfp+0x64>
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <__sfp+0x88>)
 80031b4:	60e3      	str	r3, [r4, #12]
 80031b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031ba:	6665      	str	r5, [r4, #100]	; 0x64
 80031bc:	f000 f847 	bl	800324e <__retarget_lock_init_recursive>
 80031c0:	f7ff ff96 	bl	80030f0 <__sfp_lock_release>
 80031c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031cc:	6025      	str	r5, [r4, #0]
 80031ce:	61a5      	str	r5, [r4, #24]
 80031d0:	2208      	movs	r2, #8
 80031d2:	4629      	mov	r1, r5
 80031d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031d8:	f7ff fd44 	bl	8002c64 <memset>
 80031dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031e4:	4620      	mov	r0, r4
 80031e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e8:	3468      	adds	r4, #104	; 0x68
 80031ea:	e7d9      	b.n	80031a0 <__sfp+0x1c>
 80031ec:	2104      	movs	r1, #4
 80031ee:	4638      	mov	r0, r7
 80031f0:	f7ff ff62 	bl	80030b8 <__sfmoreglue>
 80031f4:	4604      	mov	r4, r0
 80031f6:	6030      	str	r0, [r6, #0]
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d1d5      	bne.n	80031a8 <__sfp+0x24>
 80031fc:	f7ff ff78 	bl	80030f0 <__sfp_lock_release>
 8003200:	230c      	movs	r3, #12
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	e7ee      	b.n	80031e4 <__sfp+0x60>
 8003206:	bf00      	nop
 8003208:	080036b8 	.word	0x080036b8
 800320c:	ffff0001 	.word	0xffff0001

08003210 <_fwalk_reent>:
 8003210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003214:	4606      	mov	r6, r0
 8003216:	4688      	mov	r8, r1
 8003218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800321c:	2700      	movs	r7, #0
 800321e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003222:	f1b9 0901 	subs.w	r9, r9, #1
 8003226:	d505      	bpl.n	8003234 <_fwalk_reent+0x24>
 8003228:	6824      	ldr	r4, [r4, #0]
 800322a:	2c00      	cmp	r4, #0
 800322c:	d1f7      	bne.n	800321e <_fwalk_reent+0xe>
 800322e:	4638      	mov	r0, r7
 8003230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003234:	89ab      	ldrh	r3, [r5, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d907      	bls.n	800324a <_fwalk_reent+0x3a>
 800323a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800323e:	3301      	adds	r3, #1
 8003240:	d003      	beq.n	800324a <_fwalk_reent+0x3a>
 8003242:	4629      	mov	r1, r5
 8003244:	4630      	mov	r0, r6
 8003246:	47c0      	blx	r8
 8003248:	4307      	orrs	r7, r0
 800324a:	3568      	adds	r5, #104	; 0x68
 800324c:	e7e9      	b.n	8003222 <_fwalk_reent+0x12>

0800324e <__retarget_lock_init_recursive>:
 800324e:	4770      	bx	lr

08003250 <__retarget_lock_acquire_recursive>:
 8003250:	4770      	bx	lr

08003252 <__retarget_lock_release_recursive>:
 8003252:	4770      	bx	lr

08003254 <__swhatbuf_r>:
 8003254:	b570      	push	{r4, r5, r6, lr}
 8003256:	460e      	mov	r6, r1
 8003258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800325c:	2900      	cmp	r1, #0
 800325e:	b096      	sub	sp, #88	; 0x58
 8003260:	4614      	mov	r4, r2
 8003262:	461d      	mov	r5, r3
 8003264:	da08      	bge.n	8003278 <__swhatbuf_r+0x24>
 8003266:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	602a      	str	r2, [r5, #0]
 800326e:	061a      	lsls	r2, r3, #24
 8003270:	d410      	bmi.n	8003294 <__swhatbuf_r+0x40>
 8003272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003276:	e00e      	b.n	8003296 <__swhatbuf_r+0x42>
 8003278:	466a      	mov	r2, sp
 800327a:	f000 f9a7 	bl	80035cc <_fstat_r>
 800327e:	2800      	cmp	r0, #0
 8003280:	dbf1      	blt.n	8003266 <__swhatbuf_r+0x12>
 8003282:	9a01      	ldr	r2, [sp, #4]
 8003284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800328c:	425a      	negs	r2, r3
 800328e:	415a      	adcs	r2, r3
 8003290:	602a      	str	r2, [r5, #0]
 8003292:	e7ee      	b.n	8003272 <__swhatbuf_r+0x1e>
 8003294:	2340      	movs	r3, #64	; 0x40
 8003296:	2000      	movs	r0, #0
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	b016      	add	sp, #88	; 0x58
 800329c:	bd70      	pop	{r4, r5, r6, pc}
	...

080032a0 <__smakebuf_r>:
 80032a0:	898b      	ldrh	r3, [r1, #12]
 80032a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032a4:	079d      	lsls	r5, r3, #30
 80032a6:	4606      	mov	r6, r0
 80032a8:	460c      	mov	r4, r1
 80032aa:	d507      	bpl.n	80032bc <__smakebuf_r+0x1c>
 80032ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	6123      	str	r3, [r4, #16]
 80032b4:	2301      	movs	r3, #1
 80032b6:	6163      	str	r3, [r4, #20]
 80032b8:	b002      	add	sp, #8
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	ab01      	add	r3, sp, #4
 80032be:	466a      	mov	r2, sp
 80032c0:	f7ff ffc8 	bl	8003254 <__swhatbuf_r>
 80032c4:	9900      	ldr	r1, [sp, #0]
 80032c6:	4605      	mov	r5, r0
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 f895 	bl	80033f8 <_malloc_r>
 80032ce:	b948      	cbnz	r0, 80032e4 <__smakebuf_r+0x44>
 80032d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d4:	059a      	lsls	r2, r3, #22
 80032d6:	d4ef      	bmi.n	80032b8 <__smakebuf_r+0x18>
 80032d8:	f023 0303 	bic.w	r3, r3, #3
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	e7e3      	b.n	80032ac <__smakebuf_r+0xc>
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <__smakebuf_r+0x7c>)
 80032e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	6020      	str	r0, [r4, #0]
 80032ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	9b00      	ldr	r3, [sp, #0]
 80032f4:	6163      	str	r3, [r4, #20]
 80032f6:	9b01      	ldr	r3, [sp, #4]
 80032f8:	6120      	str	r0, [r4, #16]
 80032fa:	b15b      	cbz	r3, 8003314 <__smakebuf_r+0x74>
 80032fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003300:	4630      	mov	r0, r6
 8003302:	f000 f975 	bl	80035f0 <_isatty_r>
 8003306:	b128      	cbz	r0, 8003314 <__smakebuf_r+0x74>
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	f023 0303 	bic.w	r3, r3, #3
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	81a3      	strh	r3, [r4, #12]
 8003314:	89a0      	ldrh	r0, [r4, #12]
 8003316:	4305      	orrs	r5, r0
 8003318:	81a5      	strh	r5, [r4, #12]
 800331a:	e7cd      	b.n	80032b8 <__smakebuf_r+0x18>
 800331c:	080030ad 	.word	0x080030ad

08003320 <_free_r>:
 8003320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003322:	2900      	cmp	r1, #0
 8003324:	d044      	beq.n	80033b0 <_free_r+0x90>
 8003326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800332a:	9001      	str	r0, [sp, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f1a1 0404 	sub.w	r4, r1, #4
 8003332:	bfb8      	it	lt
 8003334:	18e4      	addlt	r4, r4, r3
 8003336:	f000 f97d 	bl	8003634 <__malloc_lock>
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <_free_r+0x94>)
 800333c:	9801      	ldr	r0, [sp, #4]
 800333e:	6813      	ldr	r3, [r2, #0]
 8003340:	b933      	cbnz	r3, 8003350 <_free_r+0x30>
 8003342:	6063      	str	r3, [r4, #4]
 8003344:	6014      	str	r4, [r2, #0]
 8003346:	b003      	add	sp, #12
 8003348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800334c:	f000 b978 	b.w	8003640 <__malloc_unlock>
 8003350:	42a3      	cmp	r3, r4
 8003352:	d908      	bls.n	8003366 <_free_r+0x46>
 8003354:	6825      	ldr	r5, [r4, #0]
 8003356:	1961      	adds	r1, r4, r5
 8003358:	428b      	cmp	r3, r1
 800335a:	bf01      	itttt	eq
 800335c:	6819      	ldreq	r1, [r3, #0]
 800335e:	685b      	ldreq	r3, [r3, #4]
 8003360:	1949      	addeq	r1, r1, r5
 8003362:	6021      	streq	r1, [r4, #0]
 8003364:	e7ed      	b.n	8003342 <_free_r+0x22>
 8003366:	461a      	mov	r2, r3
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	b10b      	cbz	r3, 8003370 <_free_r+0x50>
 800336c:	42a3      	cmp	r3, r4
 800336e:	d9fa      	bls.n	8003366 <_free_r+0x46>
 8003370:	6811      	ldr	r1, [r2, #0]
 8003372:	1855      	adds	r5, r2, r1
 8003374:	42a5      	cmp	r5, r4
 8003376:	d10b      	bne.n	8003390 <_free_r+0x70>
 8003378:	6824      	ldr	r4, [r4, #0]
 800337a:	4421      	add	r1, r4
 800337c:	1854      	adds	r4, r2, r1
 800337e:	42a3      	cmp	r3, r4
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	d1e0      	bne.n	8003346 <_free_r+0x26>
 8003384:	681c      	ldr	r4, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	6053      	str	r3, [r2, #4]
 800338a:	4421      	add	r1, r4
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	e7da      	b.n	8003346 <_free_r+0x26>
 8003390:	d902      	bls.n	8003398 <_free_r+0x78>
 8003392:	230c      	movs	r3, #12
 8003394:	6003      	str	r3, [r0, #0]
 8003396:	e7d6      	b.n	8003346 <_free_r+0x26>
 8003398:	6825      	ldr	r5, [r4, #0]
 800339a:	1961      	adds	r1, r4, r5
 800339c:	428b      	cmp	r3, r1
 800339e:	bf04      	itt	eq
 80033a0:	6819      	ldreq	r1, [r3, #0]
 80033a2:	685b      	ldreq	r3, [r3, #4]
 80033a4:	6063      	str	r3, [r4, #4]
 80033a6:	bf04      	itt	eq
 80033a8:	1949      	addeq	r1, r1, r5
 80033aa:	6021      	streq	r1, [r4, #0]
 80033ac:	6054      	str	r4, [r2, #4]
 80033ae:	e7ca      	b.n	8003346 <_free_r+0x26>
 80033b0:	b003      	add	sp, #12
 80033b2:	bd30      	pop	{r4, r5, pc}
 80033b4:	2000052c 	.word	0x2000052c

080033b8 <sbrk_aligned>:
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	4e0e      	ldr	r6, [pc, #56]	; (80033f4 <sbrk_aligned+0x3c>)
 80033bc:	460c      	mov	r4, r1
 80033be:	6831      	ldr	r1, [r6, #0]
 80033c0:	4605      	mov	r5, r0
 80033c2:	b911      	cbnz	r1, 80033ca <sbrk_aligned+0x12>
 80033c4:	f000 f88c 	bl	80034e0 <_sbrk_r>
 80033c8:	6030      	str	r0, [r6, #0]
 80033ca:	4621      	mov	r1, r4
 80033cc:	4628      	mov	r0, r5
 80033ce:	f000 f887 	bl	80034e0 <_sbrk_r>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	d00a      	beq.n	80033ec <sbrk_aligned+0x34>
 80033d6:	1cc4      	adds	r4, r0, #3
 80033d8:	f024 0403 	bic.w	r4, r4, #3
 80033dc:	42a0      	cmp	r0, r4
 80033de:	d007      	beq.n	80033f0 <sbrk_aligned+0x38>
 80033e0:	1a21      	subs	r1, r4, r0
 80033e2:	4628      	mov	r0, r5
 80033e4:	f000 f87c 	bl	80034e0 <_sbrk_r>
 80033e8:	3001      	adds	r0, #1
 80033ea:	d101      	bne.n	80033f0 <sbrk_aligned+0x38>
 80033ec:	f04f 34ff 	mov.w	r4, #4294967295
 80033f0:	4620      	mov	r0, r4
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	20000530 	.word	0x20000530

080033f8 <_malloc_r>:
 80033f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033fc:	1ccd      	adds	r5, r1, #3
 80033fe:	f025 0503 	bic.w	r5, r5, #3
 8003402:	3508      	adds	r5, #8
 8003404:	2d0c      	cmp	r5, #12
 8003406:	bf38      	it	cc
 8003408:	250c      	movcc	r5, #12
 800340a:	2d00      	cmp	r5, #0
 800340c:	4607      	mov	r7, r0
 800340e:	db01      	blt.n	8003414 <_malloc_r+0x1c>
 8003410:	42a9      	cmp	r1, r5
 8003412:	d905      	bls.n	8003420 <_malloc_r+0x28>
 8003414:	230c      	movs	r3, #12
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	2600      	movs	r6, #0
 800341a:	4630      	mov	r0, r6
 800341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003420:	4e2e      	ldr	r6, [pc, #184]	; (80034dc <_malloc_r+0xe4>)
 8003422:	f000 f907 	bl	8003634 <__malloc_lock>
 8003426:	6833      	ldr	r3, [r6, #0]
 8003428:	461c      	mov	r4, r3
 800342a:	bb34      	cbnz	r4, 800347a <_malloc_r+0x82>
 800342c:	4629      	mov	r1, r5
 800342e:	4638      	mov	r0, r7
 8003430:	f7ff ffc2 	bl	80033b8 <sbrk_aligned>
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	4604      	mov	r4, r0
 8003438:	d14d      	bne.n	80034d6 <_malloc_r+0xde>
 800343a:	6834      	ldr	r4, [r6, #0]
 800343c:	4626      	mov	r6, r4
 800343e:	2e00      	cmp	r6, #0
 8003440:	d140      	bne.n	80034c4 <_malloc_r+0xcc>
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	4631      	mov	r1, r6
 8003446:	4638      	mov	r0, r7
 8003448:	eb04 0803 	add.w	r8, r4, r3
 800344c:	f000 f848 	bl	80034e0 <_sbrk_r>
 8003450:	4580      	cmp	r8, r0
 8003452:	d13a      	bne.n	80034ca <_malloc_r+0xd2>
 8003454:	6821      	ldr	r1, [r4, #0]
 8003456:	3503      	adds	r5, #3
 8003458:	1a6d      	subs	r5, r5, r1
 800345a:	f025 0503 	bic.w	r5, r5, #3
 800345e:	3508      	adds	r5, #8
 8003460:	2d0c      	cmp	r5, #12
 8003462:	bf38      	it	cc
 8003464:	250c      	movcc	r5, #12
 8003466:	4629      	mov	r1, r5
 8003468:	4638      	mov	r0, r7
 800346a:	f7ff ffa5 	bl	80033b8 <sbrk_aligned>
 800346e:	3001      	adds	r0, #1
 8003470:	d02b      	beq.n	80034ca <_malloc_r+0xd2>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	442b      	add	r3, r5
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	e00e      	b.n	8003498 <_malloc_r+0xa0>
 800347a:	6822      	ldr	r2, [r4, #0]
 800347c:	1b52      	subs	r2, r2, r5
 800347e:	d41e      	bmi.n	80034be <_malloc_r+0xc6>
 8003480:	2a0b      	cmp	r2, #11
 8003482:	d916      	bls.n	80034b2 <_malloc_r+0xba>
 8003484:	1961      	adds	r1, r4, r5
 8003486:	42a3      	cmp	r3, r4
 8003488:	6025      	str	r5, [r4, #0]
 800348a:	bf18      	it	ne
 800348c:	6059      	strne	r1, [r3, #4]
 800348e:	6863      	ldr	r3, [r4, #4]
 8003490:	bf08      	it	eq
 8003492:	6031      	streq	r1, [r6, #0]
 8003494:	5162      	str	r2, [r4, r5]
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	4638      	mov	r0, r7
 800349a:	f104 060b 	add.w	r6, r4, #11
 800349e:	f000 f8cf 	bl	8003640 <__malloc_unlock>
 80034a2:	f026 0607 	bic.w	r6, r6, #7
 80034a6:	1d23      	adds	r3, r4, #4
 80034a8:	1af2      	subs	r2, r6, r3
 80034aa:	d0b6      	beq.n	800341a <_malloc_r+0x22>
 80034ac:	1b9b      	subs	r3, r3, r6
 80034ae:	50a3      	str	r3, [r4, r2]
 80034b0:	e7b3      	b.n	800341a <_malloc_r+0x22>
 80034b2:	6862      	ldr	r2, [r4, #4]
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	bf0c      	ite	eq
 80034b8:	6032      	streq	r2, [r6, #0]
 80034ba:	605a      	strne	r2, [r3, #4]
 80034bc:	e7ec      	b.n	8003498 <_malloc_r+0xa0>
 80034be:	4623      	mov	r3, r4
 80034c0:	6864      	ldr	r4, [r4, #4]
 80034c2:	e7b2      	b.n	800342a <_malloc_r+0x32>
 80034c4:	4634      	mov	r4, r6
 80034c6:	6876      	ldr	r6, [r6, #4]
 80034c8:	e7b9      	b.n	800343e <_malloc_r+0x46>
 80034ca:	230c      	movs	r3, #12
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4638      	mov	r0, r7
 80034d0:	f000 f8b6 	bl	8003640 <__malloc_unlock>
 80034d4:	e7a1      	b.n	800341a <_malloc_r+0x22>
 80034d6:	6025      	str	r5, [r4, #0]
 80034d8:	e7de      	b.n	8003498 <_malloc_r+0xa0>
 80034da:	bf00      	nop
 80034dc:	2000052c 	.word	0x2000052c

080034e0 <_sbrk_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4d06      	ldr	r5, [pc, #24]	; (80034fc <_sbrk_r+0x1c>)
 80034e4:	2300      	movs	r3, #0
 80034e6:	4604      	mov	r4, r0
 80034e8:	4608      	mov	r0, r1
 80034ea:	602b      	str	r3, [r5, #0]
 80034ec:	f7fd fa9e 	bl	8000a2c <_sbrk>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d102      	bne.n	80034fa <_sbrk_r+0x1a>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	b103      	cbz	r3, 80034fa <_sbrk_r+0x1a>
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	bd38      	pop	{r3, r4, r5, pc}
 80034fc:	20000534 	.word	0x20000534

08003500 <__sread>:
 8003500:	b510      	push	{r4, lr}
 8003502:	460c      	mov	r4, r1
 8003504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003508:	f000 f8a0 	bl	800364c <_read_r>
 800350c:	2800      	cmp	r0, #0
 800350e:	bfab      	itete	ge
 8003510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003512:	89a3      	ldrhlt	r3, [r4, #12]
 8003514:	181b      	addge	r3, r3, r0
 8003516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800351a:	bfac      	ite	ge
 800351c:	6563      	strge	r3, [r4, #84]	; 0x54
 800351e:	81a3      	strhlt	r3, [r4, #12]
 8003520:	bd10      	pop	{r4, pc}

08003522 <__swrite>:
 8003522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003526:	461f      	mov	r7, r3
 8003528:	898b      	ldrh	r3, [r1, #12]
 800352a:	05db      	lsls	r3, r3, #23
 800352c:	4605      	mov	r5, r0
 800352e:	460c      	mov	r4, r1
 8003530:	4616      	mov	r6, r2
 8003532:	d505      	bpl.n	8003540 <__swrite+0x1e>
 8003534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003538:	2302      	movs	r3, #2
 800353a:	2200      	movs	r2, #0
 800353c:	f000 f868 	bl	8003610 <_lseek_r>
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	4632      	mov	r2, r6
 800354e:	463b      	mov	r3, r7
 8003550:	4628      	mov	r0, r5
 8003552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003556:	f000 b817 	b.w	8003588 <_write_r>

0800355a <__sseek>:
 800355a:	b510      	push	{r4, lr}
 800355c:	460c      	mov	r4, r1
 800355e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003562:	f000 f855 	bl	8003610 <_lseek_r>
 8003566:	1c43      	adds	r3, r0, #1
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	bf15      	itete	ne
 800356c:	6560      	strne	r0, [r4, #84]	; 0x54
 800356e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003576:	81a3      	strheq	r3, [r4, #12]
 8003578:	bf18      	it	ne
 800357a:	81a3      	strhne	r3, [r4, #12]
 800357c:	bd10      	pop	{r4, pc}

0800357e <__sclose>:
 800357e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003582:	f000 b813 	b.w	80035ac <_close_r>
	...

08003588 <_write_r>:
 8003588:	b538      	push	{r3, r4, r5, lr}
 800358a:	4d07      	ldr	r5, [pc, #28]	; (80035a8 <_write_r+0x20>)
 800358c:	4604      	mov	r4, r0
 800358e:	4608      	mov	r0, r1
 8003590:	4611      	mov	r1, r2
 8003592:	2200      	movs	r2, #0
 8003594:	602a      	str	r2, [r5, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	f7fd f9f7 	bl	800098a <_write>
 800359c:	1c43      	adds	r3, r0, #1
 800359e:	d102      	bne.n	80035a6 <_write_r+0x1e>
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	b103      	cbz	r3, 80035a6 <_write_r+0x1e>
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	bd38      	pop	{r3, r4, r5, pc}
 80035a8:	20000534 	.word	0x20000534

080035ac <_close_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4d06      	ldr	r5, [pc, #24]	; (80035c8 <_close_r+0x1c>)
 80035b0:	2300      	movs	r3, #0
 80035b2:	4604      	mov	r4, r0
 80035b4:	4608      	mov	r0, r1
 80035b6:	602b      	str	r3, [r5, #0]
 80035b8:	f7fd fa03 	bl	80009c2 <_close>
 80035bc:	1c43      	adds	r3, r0, #1
 80035be:	d102      	bne.n	80035c6 <_close_r+0x1a>
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	b103      	cbz	r3, 80035c6 <_close_r+0x1a>
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	bd38      	pop	{r3, r4, r5, pc}
 80035c8:	20000534 	.word	0x20000534

080035cc <_fstat_r>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4d07      	ldr	r5, [pc, #28]	; (80035ec <_fstat_r+0x20>)
 80035d0:	2300      	movs	r3, #0
 80035d2:	4604      	mov	r4, r0
 80035d4:	4608      	mov	r0, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	602b      	str	r3, [r5, #0]
 80035da:	f7fd f9fe 	bl	80009da <_fstat>
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	d102      	bne.n	80035e8 <_fstat_r+0x1c>
 80035e2:	682b      	ldr	r3, [r5, #0]
 80035e4:	b103      	cbz	r3, 80035e8 <_fstat_r+0x1c>
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	bd38      	pop	{r3, r4, r5, pc}
 80035ea:	bf00      	nop
 80035ec:	20000534 	.word	0x20000534

080035f0 <_isatty_r>:
 80035f0:	b538      	push	{r3, r4, r5, lr}
 80035f2:	4d06      	ldr	r5, [pc, #24]	; (800360c <_isatty_r+0x1c>)
 80035f4:	2300      	movs	r3, #0
 80035f6:	4604      	mov	r4, r0
 80035f8:	4608      	mov	r0, r1
 80035fa:	602b      	str	r3, [r5, #0]
 80035fc:	f7fd f9fd 	bl	80009fa <_isatty>
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d102      	bne.n	800360a <_isatty_r+0x1a>
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	b103      	cbz	r3, 800360a <_isatty_r+0x1a>
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	bd38      	pop	{r3, r4, r5, pc}
 800360c:	20000534 	.word	0x20000534

08003610 <_lseek_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4d07      	ldr	r5, [pc, #28]	; (8003630 <_lseek_r+0x20>)
 8003614:	4604      	mov	r4, r0
 8003616:	4608      	mov	r0, r1
 8003618:	4611      	mov	r1, r2
 800361a:	2200      	movs	r2, #0
 800361c:	602a      	str	r2, [r5, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	f7fd f9f6 	bl	8000a10 <_lseek>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_lseek_r+0x1e>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_lseek_r+0x1e>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000534 	.word	0x20000534

08003634 <__malloc_lock>:
 8003634:	4801      	ldr	r0, [pc, #4]	; (800363c <__malloc_lock+0x8>)
 8003636:	f7ff be0b 	b.w	8003250 <__retarget_lock_acquire_recursive>
 800363a:	bf00      	nop
 800363c:	20000528 	.word	0x20000528

08003640 <__malloc_unlock>:
 8003640:	4801      	ldr	r0, [pc, #4]	; (8003648 <__malloc_unlock+0x8>)
 8003642:	f7ff be06 	b.w	8003252 <__retarget_lock_release_recursive>
 8003646:	bf00      	nop
 8003648:	20000528 	.word	0x20000528

0800364c <_read_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	4d07      	ldr	r5, [pc, #28]	; (800366c <_read_r+0x20>)
 8003650:	4604      	mov	r4, r0
 8003652:	4608      	mov	r0, r1
 8003654:	4611      	mov	r1, r2
 8003656:	2200      	movs	r2, #0
 8003658:	602a      	str	r2, [r5, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	f7fd f978 	bl	8000950 <_read>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d102      	bne.n	800366a <_read_r+0x1e>
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	b103      	cbz	r3, 800366a <_read_r+0x1e>
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	20000534 	.word	0x20000534

08003670 <_init>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr

0800367c <_fini>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr
